x-ollama-base: &ollama-base
    image: ollama/ollama:latest
    hostname: ollama
    privileged: true
    pull_policy: ${pull_policy}
    restart: ${restart}
    tty: true
    ports:
      - 11434:11434
    ulimits:
      memlock: -1
    volumes:
      - ./ollama:/root/.ollama
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ['CMD-SHELL', 'ollama --version && ollama ps || exit 1']
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

x-flowise-base: &flowise-base
    image: flowiseai/flowise:latest
    hostname: flowise
    pull_policy: ${pull_policy}
    restart: ${restart}
    environment:
      - PORT=${FPORT}
      - DATABASE_PATH=/root/.flowise
      - DATABASE_SSL=false
      - APIKEY_PATH=/root/.flowise
      - SECRETKEY_PATH=/root/.flowise
      - LOG_PATH=/root/.flowise/logs
      - REDIS_URL=${REDIS_URL}
      - FLOWISE_USERNAME=${FLOWISE_USERNAME}
      - FLOWISE_PASSWORD=${FLOWISE_PASSWORD}
      - DATABASE_TYPE=${DATABASE_TYPE}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${POSTGRESDB_PORT}
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_NAME=${POSTGRES_DB}
      - FLOWISE_FILE_SIZE_LIMIT=${FLOWISE_FILE_SIZE_LIMIT}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - IFRAME_ORIGINS=${IFRAME_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL}
      - ENABLE_METRICS=${ENABLE_METRICS}
      - METRICS_OPEN_TELEMETRY_DEBUG=${METRICS_OPEN_TELEMETRY_DEBUG}
      - DISABLE_FLOWISE_TELEMETRY=${DISABLE_FLOWISE_TELEMETRY}
    ports:
      - ${FPORT}:${FPORT}
    volumes:
      - ./flowise:/root/.flowise
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

x-openwebui-base: &openwebui-base
    image: ghcr.io/open-webui/open-webui:main
    hostname: open-webui
    pull_policy: ${pull_policy}
    restart: ${restart}
    environment:
      - PORT=${PORT}
      - ENV=prod
      - CUSTOM_NAME=lab
      - WEBUI_NAME=lab
      - ENABLE_ADMIN_CHAT_ACCESS=true
      - ENABLE_CHANNELS=true
      - DEFAULT_LOCALE=en
      - AIOHTTP_CLIENT_TIMEOUT=100
      - ENABLE_OLLAMA_API=true
      - OLLAMA_BASE_URL=${UOLLAMA}
      - ENABLE_AUTOCOMPLETE_GENERATION=true
      - AUTOCOMPLETE_GENERATION_INPUT_MAX_LENGTH=-1
      - ENABLE_FORWARD_USER_INFO_HEADERS=false
      - ENABLE_RAG_LOCAL_WEB_FETCH=false
      - RESET_CONFIG_ON_START=false
      - SAFE_MODE=false
      - CORS_ALLOW_ORIGIN=*
      - RAG_EMBEDDING_MODEL_AUTO_UPDATE=true
      - RAG_RERANKING_MODEL_AUTO_UPDATE=true
      - WHISPER_MODEL_AUTO_UPDATE=true
      - RAG_EMBEDDING_ENGINE=${RAG_EMBEDDING_ENGINE}
      - RAG_EMBEDDING_MODEL=${RAG_EMBEDDING_MODEL}
      - ENABLE_GOOGLE_DRIVE_INTEGRATION=false
      - GOOGLE_DRIVE_CLIENT_ID=
      - GOOGLE_DRIVE_API_KEY=
      - ENABLE_IMAGE_GENERATION=false
      - IMAGE_GENERATION_ENGINE=comfyui
      - IMAGE_GENERATION_MODEL=
      - IMAGE_SIZE=512x512
      - IMAGE_STEPS=50
      - COMFYUI_BASE_URL=${COMFYUI_BASE_URL}
      - COMFYUI_API_KEY=${COMFYUI_API_KEY}
      - ENABLE_WEBSOCKET_SUPPORT=true
      - WEBSOCKET_MANAGER=redis
      - WEBSOCKET_REDIS_URL=${UREDIS}
      - REDIS_URL=${UREDIS}
      - ENABLE_RAG_WEB_SEARCH=true
      - ENABLE_SEARCH_QUERY_GENERATION=true
      - RAG_WEB_SEARCH_RESULT_COUNT=3
      - RAG_WEB_SEARCH_CONCURRENT_REQUESTS=3
      - ENABLE_OPENAI_API=${ENABLE_OPENAI_API}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RAG_WEB_SEARCH_ENGINE=${RAG_WEB_SEARCH_ENGINE}
      - BRAVE_SEARCH_API_KEY=${BRAVE_SEARCH_API_KEY}
    ports:
      - ${PORT}:${PORT}
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:
      - ./openwebui:/app/backend/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

x-n8n-base: &n8n-base
    image: n8nio/n8n:latest
    hostname: n8n
    pull_policy: ${pull_policy}
    restart: ${restart}
    environment:
      - N8N_PORT=${N8N_PORT}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
      - EXECUTIONS_DATA_PRUNE_MAX_COUNT=50000
      - N8N_SECURE_COOKIE=false
      - N8N_QUEUE_TYPE=${N8N_QUEUE_HOST}
      - N8N_QUEUE_HOST=${N8N_QUEUE_HOST}
      - N8N_QUEUE_PORT=${REDIS_PORT}
      - N8N_QUEUE_NAME=${N8N_QUEUE_NAME}
      - DB_TYPE=${DB_TYPE}
      - DB_POSTGRESDB_HOST=${DATABASE_HOST}
      - DB_POSTGRESDB_PORT=${POSTGRESDB_PORT}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - N8N_TEMPLATES_ENABLED=true
      - N8N_GRACEFUL_SHUTDOWN_TIMEOUT=10
      - QUEUE_HEALTH_CHECK_ACTIVE=${QUEUE_HEALTH_CHECK_ACTIVE}
    ports:
      - ${N8N_PORT}:${N8N_PORT}
    volumes:
      - ./n8n/storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./n8n/shared:/data/shared
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "sh", "-c", "(wget -q -T 5 -O - http://127.0.0.1:5678/healthz 2>/dev/null | grep -qF '{\"status\":\"ok\"}') || exit 1"]
      start_period: 1m00s
      interval: 5s
      timeout: 10s
      retries: 10

x-langflow-base: &langflow-base
    image: langflowai/langflow:latest
    hostname: langflow
    pull_policy: ${pull_policy}
    restart: ${restart}
    environment:
      - LANGFLOW_PORT=${LANGFLOW_PORT}
      - LANGFLOW_AUTO_LOGIN=false
      - LANGFLOW_AUTO_SAVING=true
      - LANGFLOW_AUTO_SAVING_INTERVAL=1000
      - LANGFLOW_PROMETHEUS_ENABLED=false
      - LANGFLOW_SUPERUSER=${LANGFLOW_SUPERUSER}
      - LANGFLOW_SUPERUSER_PASSWORD=${LANGFLOW_SUPERUSER_PASSWORD}
    ports:
      - ${LANGFLOW_PORT}:${LANGFLOW_PORT}
    volumes:
      - ./langflow:/app/langflow
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

x-anythingllm-base: &anythingllm-base
    image: mintplexlabs/anythingllm
    hostname: anythingllm
    pull_policy: ${pull_policy}
    restart: ${restart}
    cap_add:
      - SYS_ADMIN
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - STORAGE_DIR=/app/server/storage
      - UID=${UID}
      - GID=${GID}
      - LLM_PROVIDER=${LLM_PROVIDER}
      - OLLAMA_BASE_PATH=${UOLLAMA}
      - OLLAMA_MODEL_PREF=${OLLAMA_MODEL_PREF}
      - OLLAMA_MODEL_TOKEN_LIMIT=${OLLAMA_MODEL_TOKEN_LIMIT}
      - OPEN_AI_KEY=${OPEN_AI_KEY}
      - OPEN_MODEL_PREF=${OPEN_MODEL_PREF}
      - EMBEDDING_ENGINE=${EMBEDDING_ENGINE}
      - EMBEDDING_BASE_PATH=${UOLLAMA}
      - EMBEDDING_MODEL_PREF=${EMBEDDING_MODEL_PREF}
      - EMBEDDING_MODEL_MAX_CHUNK_LENGTH=${EMBEDDING_MODEL_MAX_CHUNK_LENGTH}
      - PASSWORDMINCHAR=${PASSWORDMINCHAR}
      - PASSWORDMAXCHAR=${PASSWORDMAXCHAR}
      - PASSWORDLOWERCASE=${PASSWORDLOWERCASE}
      - PASSWORDUPPERCASE=${PASSWORDUPPERCASE}
      - PASSWORDNUMERIC=${PASSWORDNUMERIC}
      - PASSWORDSYMBOL=${PASSWORDSYMBOL}
      - PASSWORDREQUIREMENTS=${PASSWORDREQUIREMENTS}
      - VECTOR_DB=${VECTOR_DB}
      - CHROMA_ENDPOINT=${CHROMA_ENDPOINT}
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    volumes:
      - ./anythingllm:/app/server/storage
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

x-postgres-base: &postgres-base
    image: postgres:latest
    hostname: postgres
    pull_policy: ${pull_policy}
    restart: ${restart}
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./postgres:/var/lib/postgresql/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U user -d lab']
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

x-redis-base: &redis-base
    image: redislabs/redismod:latest
    hostname: redis
    pull_policy: ${pull_policy}
    restart: ${restart}
    environment:
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DATABASES=16
      - REDIS_ARGS=--save 20 1
    volumes:
      - ./redis:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      start_period: 5s
      interval: 1s
      timeout: 3s
      retries: 5

x-chroma-base: &chroma-base
    image: chromadb/chroma:latest
    hostname: chroma
    pull_policy: ${pull_policy}
    restart: ${restart}
    environment:
      - ANONYMIZED_TELEMETRY=FALSE
      - IS_PERSISTENT=TRUE
      - ALLOW_RESET=TRUE
    volumes:
      - ./chroma:/chroma/chroma
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:8000/api/v2/heartbeat" ]
      start_period: 5s
      interval: 30s
      timeout: 10s
      retries: 3

x-kafka-base: &kafka-base
    image: apache/kafka:latest
    hostname: kafka
    pull_policy: ${pull_policy}
    restart: ${restart}
    ports:
      - ${kafka1}:${kafka1}
      - ${kafka2}:${kafka2}
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_LISTENERS=PLAINTEXT://localhost:${kafka1},CONTROLLER://localhost:${kafka2}
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:${kafka1}
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@localhost:${kafka2}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=3
    volumes: 
      - ./broker/data:/var/lib/kafka/data

x-whisper-base: &whisper-base
    image: onerahmet/openai-whisper-asr-webservice:latest-gpu
    hostname: whisper
    pull_policy: ${pull_policy}
    restart: ${restart}
    ports:
      - ${wport}:${wport}
    volumes:
      - ./whisper:/app/app
      - ./cache-whisper:/root/.cache

################################################

services:
    flowise-all:
        <<: *flowise-base
        profiles: ["nvidia", "others", "minimal"]
        container_name: flowise
        links:
          - redis-all
        depends_on:
          - redis-all
          - postgres-all

    n8n-all:
        <<: *n8n-base
        profiles: ["nvidia", "others", "minimal"]
        container_name: n8n
        links:
          - redis-all
        depends_on:
          - postgres-all
          - redis-all

    postgres-all:
        <<: *postgres-base
        profiles: ["nvidia", "others", "minimal"]
        container_name: postgres

    redis-all:
        <<: *redis-base
        profiles: ["nvidia", "others", "minimal"]
        container_name: redis

    chroma-all:
        <<: *chroma-base
        profiles: ["nvidia", "others", "minimal"]
        container_name: chroma

    langflow-all:
        <<: *langflow-base
        profiles: ["nvidia", "others"]
        container_name: langflow

    anythingllm-all:
        <<: *anythingllm-base
        profiles: ["nvidia", "others"]
        container_name: anythingllm

    openwebui-all:
        <<: *openwebui-base
        profiles: ["extras"]
        container_name: openwebui
        links:
          - redis-all
        depends_on:
          - redis-all

    kafka-all:
        <<: *kafka-base
        profiles: ["extras"]
        container_name: kafka

    ollama-others:
        <<: *ollama-base
        profiles: ["others"]
        container_name: ollama
        environment:
          - OLLAMA_DEBUG=${OLLAMA_DEBUG}
          - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE}
          - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS}
          - OLLAMA_MAX_QUEUE=${OLLAMA_MAX_QUEUE}
          - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL}
          - OLLAMA_NOPRUNE=${OLLAMA_NOPRUNE}
          - OLLAMA_SCHED_SPREAD=${OLLAMA_SCHED_SPREAD}
          - OLLAMA_FLASH_ATTENTION=${OLLAMA_FLASH_ATTENTION}
          - OLLAMA_KV_CACHE_TYPE=${OLLAMA_KV_CACHE_TYPE}
          - OLLAMA_LOAD_TIMEOUT=${OLLAMA_LOAD_TIMEOUT}

    ollama-nvidia:
        <<: *ollama-base
        profiles: ["nvidia"]
        container_name: ollama
        environment:
          - NVIDIA_VISIBLE_DEVICES=all
          - NVIDIA_DRIVER_CAPABILITIES=compute,utility,video
          - OLLAMA_DEBUG=${OLLAMA_DEBUG}
          - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE}
          - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS}
          - OLLAMA_MAX_QUEUE=${OLLAMA_MAX_QUEUE}
          - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL}
          - OLLAMA_NOPRUNE=${OLLAMA_NOPRUNE}
          - OLLAMA_SCHED_SPREAD=${OLLAMA_SCHED_SPREAD}
          - OLLAMA_FLASH_ATTENTION=${OLLAMA_FLASH_ATTENTION}
          - OLLAMA_KV_CACHE_TYPE=${OLLAMA_KV_CACHE_TYPE}
          - OLLAMA_LOAD_TIMEOUT=${OLLAMA_LOAD_TIMEOUT}
        runtime: nvidia
        deploy:
          resources:
            reservations:
              devices:
                - driver: nvidia
                  count: all
                  capabilities: [gpu]

    whisper-nvidia:
        <<: *whisper-base
        profiles: ["extras-gpu"]
        container_name: whisper
        environment:
          - ASR_ENGINE=${ASR_ENGINE}
          - ASR_MODEL=${ASR_MODEL}
          - ASR_DEVICE=cuda
          - MODEL_IDLE_TIMEOUT=300
        runtime: nvidia
        deploy:
          resources:
            reservations:
              devices:
                - driver: nvidia
                  count: all
                  capabilities: [gpu]
